Checklist:
- Fallo de página en usertrap()
- Modificados fork y exit
- 1ª fase acabada, los test funcionan
- Compartición de páginas padre/hijos
- nose que pone ahí profe vaya rayajo

################################
######## PRIMERA PARTE #########
################################

- Añadir al struct proc un struct VMA vmas[MAX_VMA]
- Añadir la constante o el define MAX_VMA por ejemplo 16
- En la estructura VMA:

struct VMA {
    int used;       // 0 si no, 1 si sí
    ??? addrBegin;  // Dirección virtual en la que empieza esta VMA
    ??? length;     // Tamaño en bytes o noseque de la VMA
    ??? prot;       // Protección (lectura, escritura, ambos)
    ??? flag;       // Flags de noseque (int flags)
    ??? offset;     // Lo que sea que aparezca en el 
    struct file* fichero;     // Tal cual el fichero que se está abriendo
}

- En sysproc:

int sys_mmap(void){
    // Comprobar argumentos

    // Recorrer array de vmas y pillar la primera libre

    // Encontrar un sitio de la memoria virtual empezando arriba (pero sin contar las dos primeras páginas)

    // Rellenar los campos de la vma
}

int sys_munmap(void){

}

- En proc.c:

??? map(){

}

??? munmap(){

}

- Problema con addrBegin: dónde mapeo??? El mapa de un proceso en xv6 tiene un hueco enorme. Arriba del todo está el trampolín, cosas del kernel y después el hueco. Podemos empezar a mapear desde arriba hacia abajo empezando desde ahí.
- No hace falta mover las VMAs cuando se vayan eliminando y creando y se cree fragmentación.
- La llamada munmap no permite hacer agujeros: permite cambiar el tamaño y cambiar la dirección, pero NO permite quitarle un cacho de enmedio. Por ejemplo, tengo un mapeo con las tres páginas de las direcciones 0x8000, 0x9000 y 0xA000. Si te digo munmap(0x9000,0x2000), entonces se queda en la página 0x8000 y ya está. Si se desmapea desde el principio, por ejemplo munmap(0x8000,0x2000), ahora se tiene una página, que es la 0xA000 (hay que cambiar la dirección de inicio).
- Si se queda la longitud a cero, se tiene que poner la VMA como no utilizada y quitarla de la lista de VMAs

- Fallos de página otra vez: al acceder por primera vez a un fichero mapeado en memoria habrá un fallo de página. Hay que hacer lazy alloc como en ASO pero los traps son distintos porque esto es RISC-V (causa 13: lectura, causa 15: escritura). USAR MAPPAGES CON UNA SOLA PAGINA PARA PODER HACERLO.
- Los traps están en kernel/trap.c. en usertrap() se indica cuando hay un trap en modo usuario. con r_scause() se puede saber qué causa es. Si es 13 y 15 entonces es lectura/escritura, se mapea la página. A lo mejor el mapeo se puede hacer con copyout. Se puede dar que el kernel esté haciendo una llamada al sistema con un VMA de usuario y este todavía no esté mapeado. Parecería que el kernel ha dado trap por VMA pero en realidad la VMA es del usuario. Dice el profe que esto nunca debería pasar en los tests pero que ya dirá.
- Comprobar que la dirección de fallo tiene sentido (está en una VMA). Comprobar que estamos en usuario. Ir al fichero, leer una página, meterla en un marco de página, asociarla a la tabla de páginas, regresar.
- Al abrir un fichero mapeado hay que mantener el número de referencias activas. Si se hace close antes de tiempo es como que no tenemos abierto el fichero y lo pueden eliminar mientras lo tenemos mapeado. Solo se baja el contador de referencias al hacer munmap de todo. Mirar sys_open o sys_dup para ver cómo se incrementa o decrementa el número de referencias.
- Hay que cambiar fork() porque hay que copiar más cosas al crear hijos. Hereda las VMAs del padre igual que hereda los ficheros abiertos. Copiar todo y duplicar VMAs (marcos de página diferentes, copiar memoria física, ver cómo se copia lo demás y será lo mismo digo yo), aumentar en 1 el número de referencias del fichero.
- Habría que llamar a munmap() en exit() para que así se liberen todos los mapeos al terminar.
- Hay una función que creo que es freerange y te libera una región de páginas virtuales (se liberan las páginas físicas asociadas). Por ejemplo freerange (0x3000,x0x6000) libera desde la dirección 0x3000 a la 0x9FFF si no me fallan los cálculos.
- Hay un panic que te salta si intentas hacer freerange() y pilla una página virtual que no tiene página física. Antes eso no debía pasar, pero ahora no pasa nada así que podemos quitar el panic y a chuparla dice el profe.

- SOLO VMAS BAJO DEMANDA, LO QUE VA DESDE 0x000 HASTA proc->sz SIEMPRE ESTÁ MAPEADO DESDE EL COMIENZO.

- Tener en cuenta la protección de lectura y escritura.
- Tener en cuenta si el mapeo es compartido o privado. Si es compartido hay que escribir las páginas en disco al hacer munmap()

###########################################
####### SEGUNDA PARTE (OPCIONAL??) ########
###########################################

- Si dos procesos tienen el mismo fichero abierto, que compartan las páginas físicas.
    - Si es copia compartida yoquese.
    - Si es copia privativa hay que copy-on-write.

- El exec no lee el código y datos y demás directamente sino que lo hace bajo demanda.

- La syscall mmap debería aceptar tamaños de mapeos que no sean múltiplos de una página, aunque de igual manera se redondee.